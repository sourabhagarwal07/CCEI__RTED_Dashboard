#UID = rstudioapi::askForPassword("username")

library(DBI)
library(tidyverse)
library(highcharter)
library(dplyr)
library(dbplyr)
library(xts)
library(shinycustomloader)
library(config)
library(shinyBS)
library(shi18ny)
library(readxl)

ddf <- addResourcePath("data_dictionay.xlsx","www/")
data_dict <- read_xlsx("www/data_dictionay.xlsx", sheet = "Variables definitions")
data_dict_df <- as.data.frame(data_dict)

config <- config::get()

config$provinces$PEI$table1

read_excel("")


server <- "ccei.database.windows.net"
database = "ccei"
con <- DBI::dbConnect(odbc::odbc(), 
                      UID = rstudioapi::askForPassword("username"),
                      Driver="ODBC Driver 17 for SQL Server",
                      Server = server, Database = database,
                      Authentication = "ActiveDirectoryInteractive")

shinyExample()

langs <- getOption("highcharter.lang")

langs$loading <- "<i class='fas fa-circle-notch fa-spin fa-4x'></i>"

options(highcharter.lang = langs)

highchartProxy("hc_addpoint") %>%
  hcpxy_add_point(
    id = "ts",
    point = list(x = datetime_to_timestamp(Sys.time()), y = rnorm(1))
  )

highchartProxy <- function(shinyId, session = shiny::getDefaultReactiveDomain()) {
  proxy <- list(id = shinyId, session = session)
  class(proxy) <- c("higchartProxy")
  
  return(proxy)
}

highchartProxy(shinyId, session = shiny::getDefaultReactiveDomain())


time_period <- 7
Previous_date <- as.Date(Sys.Date())-(time_period)
previous_time <- paste(Previous_date,"00:00:00",sep=" ")

graph <- function(graph_data,x){
  out <- highchart(type = "stock") %>% hc_boost(enabled = TRUE) %>%
    hc_add_series(graph_data, name="Load", type = "line",color = x)
  return(out)
}
  
table1 <- tbl(con, "ab_test_2") %>% collect()

ab_load_ts_1 <-  xts(table1$Calgary,table1$Date_time_local)
ab_load_ts_1_yr <- to.yearly(ab_load_ts_1)
ab_load_ts_2 <-  xts(table1$Central,table1$Date_time_local)
ab_load_ts_2_yr <- to.yearly(ab_load_ts_2)
ab_load_ts_3 <-  xts(table1$Edmonton,table1$Date_time_local)
ab_load_ts_3_yr <- to.yearly(ab_load_ts_3)
ab_load_ts_4 <-  xts(table1$Northeast,table1$Date_time_local)
ab_load_ts_4_yr <- to.yearly(ab_load_ts_4)
ab_load_ts_5 <-  xts(table1$Northwest,table1$Date_time_local)
ab_load_ts_5_yr <- to.yearly(ab_load_ts_5)
ab_load_ts_6 <-  xts(table1$South,table1$Date_time_local)
ab_load_ts_6_yr <- to.yearly(ab_load_ts_6)




ab_load_chart <- highchart(type = "stock") %>% hc_boost(enabled = TRUE) %>%
  hc_add_series(ab_load_ts_1_yr, name="Calgary Load", type = "line")%>%
  hc_add_series(ab_load_ts_2_yr, name="Central Load", type = "line",color = "Light red")%>%
  hc_add_series(ab_load_ts_3_yr, name="Edmonton Load", type = "line",color = "light green")%>%
  hc_add_series(ab_load_ts_4_yr, name="Northeast Load", type = "line",color = "purple")%>%
  hc_add_series(ab_load_ts_5_yr, name="Northwest Load", type = "line",color = "orange")%>%
  hc_add_series(ab_load_ts_6_yr, name="South Load", type = "line",color = "brown")


highchartProxy("hc_ld") %>%
  hcpxy_loading(action = "show")

Sys.sleep(1)

table1 <- tbl(con, "ab_hourly_zonal_demand_hist_utc") %>% collect()

ab_load_ts_1 <-  xts(table1$Calgary,table1$Date_time_local)
ab_load_ts_1_yr <- to.yearly(ab_load_ts_1)
ab_load_ts_2 <-  xts(table1$Central,table1$Date_time_local)
ab_load_ts_2_yr <- to.yearly(ab_load_ts_2)
ab_load_ts_3 <-  xts(table1$Edmonton,table1$Date_time_local)
ab_load_ts_3_yr <- to.yearly(ab_load_ts_3)
ab_load_ts_4 <-  xts(table1$Northeast,table1$Date_time_local)
ab_load_ts_4_yr <- to.yearly(ab_load_ts_4)
ab_load_ts_5 <-  xts(table1$Northwest,table1$Date_time_local)
ab_load_ts_5_yr <- to.yearly(ab_load_ts_5)
ab_load_ts_6 <-  xts(table1$South,table1$Date_time_local)
ab_load_ts_6_yr <- to.yearly(ab_load_ts_6)

highchartProxy("hc_ld") %>% 
  highchart(type = "datetime") %>% hc_boost(enabled = TRUE) %>%
  hc_add_series(ab_load_ts_1, name="Calgary Load", type = "column")%>%
  

Sys.sleep(1)

highchartProxy("hc_ld") %>%
  hcpxy_loading(action = "hide") %>% 
  hcpxy_update_series()

a <- Sys.time()

Sys.sleep(10)

b <- Sys.time()

print(difftime(b, a, units="secs"))

table2 <- tbl(con, "ab_hourly_zonal_demand_hist_utc") %>% collect()
nrow(table2)

table_z <- tbl(con, "pei_rted") %>% collect()
nrow(table_z$on_island_wind)
nrow(table_z$Date_time_local)



tail(ab_load_ts_1,1)
tail(index(ab_load_ts_1),1)
tail(coredata(ab_load_ts_1),1)

lsf.str("package:highcharter")

c <- data.frame(Date = format(index(table_z_ts_1_yr),"%Y"),coredata(table_z_ts_1_yr))



table_z <- tbl(con, "pei_rted") %>% arrange(Date_time_local) %>% collect()
table_z_1 <-  xts(table_z$on_island_load,table_z$Date_time_local)
table_z_ts_1_yr <- to.weekly(table_z_1)

tclass(table_z_ts_1_yr)

nrow(table_z_ts_1_yr$table_z_1.High)
nrow(table_z_ts_1_yr$table_z_1.Low)

avg_val <- table_z_ts_1_yr$table_z_1.High - table_z_ts_1_yr$table_z_1.Low



highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>%  hc_rangeSelector(enabled = TRUE) %>%
  hc_xAxis(type = "datetime",title = list(text = "Highest and Lowest Values of Load Yearly")) %>% 
  hc_add_series(table_z_ts_1_yr$table_z_1.High,name = "High Load", type = "line") %>%
  hc_add_series(table_z_ts_1_yr$table_z_1.Low, name ="Low Load ",type = "line",color = "pink") %>%
  hc_rangeSelector( 
    buttons = list(
    list(type = 'all', text = 'All'),
    list(type = 'year', count = 3, text = '3y'),
    list(type = 'year', count = 1, text = '1y'),
    list(type = 'month', count = 6, text = '6m'),
    list(type = 'month', count = 1, text = '1m'),
    list(type = 'week', count = 3, text = '3w'),
    list(type = 'week', count = 1, text = '1w')
    ),selected = 6)


zoom_data <- function()
{
  zm <- list(
    list(type = 'all', text = 'All'),
    list(type = 'year', count = 3, text = '3y'),
    list(type = 'year', count = 1, text = '1y'),
    list(type = 'month', count = 6, text = '6m'),
    list(type = 'month', count = 1, text = '1m'),
    list(type = 'week', count = 3, text = '3w'),
    list(type = 'week', count = 1, text = '1w')
  )
  return(zm)
}
graph_data <- function(sr,nm,ty,cl)
{
  dat <- hc_add_series(sr,name = nm, type = ty, color = cl)
  return(dat)
}
graph_1 <- function(gd,tx)
{
  highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>% 
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd 
}
graph_2 <- function(gd,gd1,tx)
{
  highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1
}
graph_3 <- function(gd,gd1,tx)
{
  highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1
}
graph_4 <- function(gd,gd1,tx,btns,y)
{
  highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>% hc_rangeSelector(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1 %>% hc_rangeSelector( 
      buttons = btns,selected = y)
}

pei_ind_dat <- tbl(con, "pei_rted") %>% arrange(Date_time_local) %>% collect()
pei_date_ind_1_1 <- paste("2014-01-01","00:00:00",sep = " ")
pei_date_ind_1_2 <- paste("2018-01-01","00:00:00",sep = " ")
pei_ind_subset_dat <- subset(pei_ind_dat,subset = (pei_ind_dat$Date_time_local >= pei_date_ind_1_1 & pei_ind_dat$Date_time_local <= pei_date_ind_1_2))
pei_ind_dat_ts <- xts(pei_ind_dat$on_island_load,pei_ind_dat$Date_time_local)
pei_ind_subset_ts <- xts(pei_ind_subset_dat$on_island_load,pei_ind_subset_dat$Date_time_local)
pei_ind_dat_ts_yearly <- to.yearly(pei_ind_subset_ts)
pei_ind_dat_ts_monthly <- to.monthly(pei_ind_subset_ts)
pei_ind_dat_ts_weekly <- to.weekly(pei_ind_subset_ts)
pei_ind_dat_ts_daily <- to.daily(pei_ind_subset_ts)
hrt <- function(){
pei_ind_dat_ts_hourly <- to.hourly(pei_ind_subset_ts)
}
tail(index(pei_ind_dat_ts_yearly),1)
nrow(pei_ind_dat_ts_hourly)




############################################################################################################################################################################

graph <- function(graph_data,clr,vr,ex_var){
  if (is.null(ex_var))
  {
    out <- highchart() %>% 
      hc_xAxis(type = "datetime") %>% 
      hc_add_series(graph_data, type = "line", name = paste(vr,":",sep = " "), color = clr) %>% 
      hc_navigator(enabled = TRUE)
  }
  else
  {
    out <- highchart() %>% 
      hc_xAxis(type = "datetime") %>% 
      hc_add_series(graph_data, type = "line", name = paste(vr,":",sep = " "), color = clr) %>%
      ex_var %>%
      hc_navigator(enabled = TRUE)
  }
}


zoom_data <- function()
{
  zm <- list(
    list(type = 'all', text = 'All'),
    list(type = 'year', count = 3, text = '3y'),
    list(type = 'year', count = 1, text = '1y'),
    list(type = 'month', count = 6, text = '6m'),
    list(type = 'month', count = 1, text = '1m'),
    list(type = 'week', count = 3, text = '3w'),
    list(type = 'week', count = 1, text = '1w')
  )
  return(zm)
}
graph_data <- function(sr,nm,ty,cl)
{
  dat <- hc_add_series(sr,name = nm, type = ty, color = cl)
  return(dat)
}
graph_1 <- function(gd,tx,btns,y)
{
  gp1 <- highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>% hc_rangeSelector(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% hc_rangeSelector( 
      buttons = btns,selected = y)
  return(gp1)
}
graph_2 <- function(gd,gd1,tx)
{
  gp2 <- highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1
  return(gp2)
}
graph_3 <- function(gd,gd1,tx)
{
  gp3 <- highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1
  return(gp3)
}
graph_4 <- function(gd,gd1,tx,btns,y)
{
  gp4 <- highchart() %>% hc_boost(enabled = TRUE) %>% hc_navigator(enabled = TRUE) %>% hc_rangeSelector(enabled = TRUE) %>%
    hc_xAxis(type = "datetime",title = list(text = tx)) %>% gd %>% gd1 %>% hc_rangeSelector( 
      buttons = btns,selected = y)
  return(gp4)
}


notification_generator <- function(table_name,Download_time){
  item <- notificationItem(
    text = paste("The File",table_name,"is successfully downloaded. (",Download_time,").",sep = " "),
    icon = icon("check-circle"),
    status = "success"
  )
  
  return(item)
}


# notifications <- reactive({list(notificationItem(
#    text = "Currently, No Notification",
#    icon = icon("check-circle"),
#    status = "success"
#))})

#if(is_null(notifications)){
#output$Notifications_type <- renderMenu(
#    dropdownMenu(type = "notifications", notificationItem(
#        text = "Currently, No Notification",
#        icon = icon("check-circle"),
#        status = "success"
#    ))
#)}
#else
#{
#    output$Notifications_type <- renderMenu(
#        dropdownMenu(type = "notifications", .list = notifications()))       
#}






